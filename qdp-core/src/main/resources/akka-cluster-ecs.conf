akka {
  actor {
    provider = "cluster"
  }
  remote.artery {
    canonical {
      port = 2551
    }
    advanced.maximum-frame-size = 2MiB
  }
  cluster {
    downing-provider-class = "akka.cluster.sbr.SplitBrainResolverProvider"
    split-brain-resolver {
      active-strategy = static-quorum
      static-quorum.quorum-size = 2
      stable-after = 20s
      down-all-when-unstable = 15s
    }
  }
  coordinated-shutdown.exit-jvm = on
  log-dead-letters = 0
  management {
    cluster.bootstrap.contact-point.fallback-port = 8558
  }

  discovery {
    method = aws-api-ecs
  }

  actor {
      serializers {
        jackson-cbor = "akka.serialization.jackson.JacksonCborSerializer"
      }

      serialization-bindings {
        "com.quantori.qdp.core.task.actor.StreamTaskActor$Command" = jackson-cbor
        "com.quantori.qdp.core.task.model.StreamTaskStatus" = jackson-cbor
        "com.quantori.qdp.core.task.model.StreamTaskDetails" = jackson-cbor
        "com.quantori.qdp.core.task.model.StreamTaskProcessingException" = jackson-cbor
        "com.quantori.qdp.core.source.SourceRootActor$Command" = jackson-cbor
        "com.quantori.qdp.core.source.SearchActor$Command" = jackson-cbor
        "com.quantori.qdp.core.source.SearchActor$Close" = jackson-cbor
        "com.quantori.qdp.api.model.core.SearchResult" = jackson-cbor
        "com.quantori.qdp.api.model.core.MultiStorageSearchRequest" = jackson-cbor
        "com.quantori.qdp.api.model.core.StorageRequest" = jackson-cbor
      }
  }
}
